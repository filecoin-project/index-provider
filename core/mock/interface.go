// Code generated by MockGen. DO NOT EDIT.
// Source: core/interface.go

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	reflect "reflect"

	core "github.com/filecoin-project/indexer-reference-provider/core"
	schema "github.com/filecoin-project/storetheindex/api/v0/ingest/schema"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
	peer "github.com/libp2p/go-libp2p-core/peer"
	multihash "github.com/multiformats/go-multihash"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockInterface) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInterfaceMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInterface)(nil).Close), ctx)
}

// GetAdv mocks base method.
func (m *MockInterface) GetAdv(ctx context.Context, id cid.Cid) (schema.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdv", ctx, id)
	ret0, _ := ret[0].(schema.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdv indicates an expected call of GetAdv.
func (mr *MockInterfaceMockRecorder) GetAdv(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdv", reflect.TypeOf((*MockInterface)(nil).GetAdv), ctx, id)
}

// GetLatestAdv mocks base method.
func (m *MockInterface) GetLatestAdv(ctx context.Context) (cid.Cid, schema.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAdv", ctx)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(schema.Advertisement)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestAdv indicates an expected call of GetLatestAdv.
func (mr *MockInterfaceMockRecorder) GetLatestAdv(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAdv", reflect.TypeOf((*MockInterface)(nil).GetLatestAdv), ctx)
}

// NotifyPut mocks base method.
func (m *MockInterface) NotifyPut(ctx context.Context, key core.LookupKey, metadata []byte) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyPut", ctx, key, metadata)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyPut indicates an expected call of NotifyPut.
func (mr *MockInterfaceMockRecorder) NotifyPut(ctx, key, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPut", reflect.TypeOf((*MockInterface)(nil).NotifyPut), ctx, key, metadata)
}

// NotifyRemove mocks base method.
func (m *MockInterface) NotifyRemove(ctx context.Context, key core.LookupKey, metadata []byte) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRemove", ctx, key, metadata)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyRemove indicates an expected call of NotifyRemove.
func (mr *MockInterfaceMockRecorder) NotifyRemove(ctx, key, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRemove", reflect.TypeOf((*MockInterface)(nil).NotifyRemove), ctx, key, metadata)
}

// Publish mocks base method.
func (m *MockInterface) Publish(ctx context.Context, adv schema.Advertisement) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, adv)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockInterfaceMockRecorder) Publish(ctx, adv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockInterface)(nil).Publish), ctx, adv)
}

// PublishLocal mocks base method.
func (m *MockInterface) PublishLocal(ctx context.Context, adv schema.Advertisement) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishLocal", ctx, adv)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishLocal indicates an expected call of PublishLocal.
func (mr *MockInterfaceMockRecorder) PublishLocal(ctx, adv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishLocal", reflect.TypeOf((*MockInterface)(nil).PublishLocal), ctx, adv)
}

// Push mocks base method.
func (m *MockInterface) Push(ctx context.Context, indexer peer.ID, h multihash.Multihash, metadata []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, indexer, h, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockInterfaceMockRecorder) Push(ctx, indexer, h, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockInterface)(nil).Push), ctx, indexer, h, metadata)
}

// PushAdv mocks base method.
func (m *MockInterface) PushAdv(ctx context.Context, indexer peer.ID, adv schema.Advertisement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushAdv", ctx, indexer, adv)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushAdv indicates an expected call of PushAdv.
func (mr *MockInterfaceMockRecorder) PushAdv(ctx, indexer, adv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushAdv", reflect.TypeOf((*MockInterface)(nil).PushAdv), ctx, indexer, adv)
}

// RegisterCidCallback mocks base method.
func (m *MockInterface) RegisterCidCallback(cb core.CidCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCidCallback", cb)
}

// RegisterCidCallback indicates an expected call of RegisterCidCallback.
func (mr *MockInterfaceMockRecorder) RegisterCidCallback(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCidCallback", reflect.TypeOf((*MockInterface)(nil).RegisterCidCallback), cb)
}
